// Code generated by MockGen. DO NOT EDIT.
// Source: minesweepersvc/game_type.go

// Package mock_minesweepersvc is a generated GoMock package.
package mocks

import (
	gomock "github.com/golang/mock/gomock"
	"github.com/tomiok/minesweeper-API/minesweepersvc"
	reflect "reflect"
)

// MockMineSweeperGameService is a mock of MineSweeperGameService interface
type MockMineSweeperGameService struct {
	ctrl     *gomock.Controller
	recorder *MockMineSweeperGameServiceMockRecorder
}

// MockMineSweeperGameServiceMockRecorder is the mock recorder for MockMineSweeperGameService
type MockMineSweeperGameServiceMockRecorder struct {
	mock *MockMineSweeperGameService
}

// NewMockMineSweeperGameService creates a new mock instance
func NewMockMineSweeperGameService(ctrl *gomock.Controller) *MockMineSweeperGameService {
	mock := &MockMineSweeperGameService{ctrl: ctrl}
	mock.recorder = &MockMineSweeperGameServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMineSweeperGameService) EXPECT() *MockMineSweeperGameServiceMockRecorder {
	return m.recorder
}

// CreateGame mocks base method
func (m *MockMineSweeperGameService) CreateGame(game *minesweepersvc.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGame indicates an expected call of CreateGame
func (mr *MockMineSweeperGameServiceMockRecorder) CreateGame(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockMineSweeperGameService)(nil).CreateGame), game)
}

// Start mocks base method
func (m *MockMineSweeperGameService) Start(name string) (*minesweepersvc.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Start", name)
	ret0, _ := ret[0].(*minesweepersvc.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Start indicates an expected call of Start
func (mr *MockMineSweeperGameServiceMockRecorder) Start(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Start", reflect.TypeOf((*MockMineSweeperGameService)(nil).Start), name)
}

// Click mocks base method
func (m *MockMineSweeperGameService) Click(name, clickType string, i, j int) (*minesweepersvc.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Click", name, clickType, i, j)
	ret0, _ := ret[0].(*minesweepersvc.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Click indicates an expected call of Click
func (mr *MockMineSweeperGameServiceMockRecorder) Click(name, clickType, i, j interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Click", reflect.TypeOf((*MockMineSweeperGameService)(nil).Click), name, clickType, i, j)
}

// FlushAll mocks base method
func (m *MockMineSweeperGameService) FlushAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll
func (mr *MockMineSweeperGameServiceMockRecorder) FlushAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockMineSweeperGameService)(nil).FlushAll))
}

// CreateUser mocks base method
func (m *MockMineSweeperGameService) CreateUser(user *minesweepersvc.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", user)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockMineSweeperGameServiceMockRecorder) CreateUser(user interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMineSweeperGameService)(nil).CreateUser), user)
}

// GetUser mocks base method
func (m *MockMineSweeperGameService) GetUser(username string) (*minesweepersvc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*minesweepersvc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockMineSweeperGameServiceMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockMineSweeperGameService)(nil).GetUser), username)
}

// MockMineSweeperGameStorage is a mock of MineSweeperGameStorage interface
type MockMineSweeperGameStorage struct {
	ctrl     *gomock.Controller
	recorder *MockMineSweeperGameStorageMockRecorder
}

// MockMineSweeperGameStorageMockRecorder is the mock recorder for MockMineSweeperGameStorage
type MockMineSweeperGameStorageMockRecorder struct {
	mock *MockMineSweeperGameStorage
}

// NewMockMineSweeperGameStorage creates a new mock instance
func NewMockMineSweeperGameStorage(ctrl *gomock.Controller) *MockMineSweeperGameStorage {
	mock := &MockMineSweeperGameStorage{ctrl: ctrl}
	mock.recorder = &MockMineSweeperGameStorageMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockMineSweeperGameStorage) EXPECT() *MockMineSweeperGameStorageMockRecorder {
	return m.recorder
}

// CreateGame mocks base method
func (m *MockMineSweeperGameStorage) CreateGame(game *minesweepersvc.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateGame indicates an expected call of CreateGame
func (mr *MockMineSweeperGameStorageMockRecorder) CreateGame(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateGame", reflect.TypeOf((*MockMineSweeperGameStorage)(nil).CreateGame), game)
}

// UpdateGame mocks base method
func (m *MockMineSweeperGameStorage) UpdateGame(game *minesweepersvc.Game) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateGame", game)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateGame indicates an expected call of UpdateGame
func (mr *MockMineSweeperGameStorageMockRecorder) Update(game interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateGame", reflect.TypeOf((*MockMineSweeperGameStorage)(nil).UpdateGame), game)
}

// GetGame mocks base method
func (m *MockMineSweeperGameStorage) GetGame(name string) (*minesweepersvc.Game, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetGame", name)
	ret0, _ := ret[0].(*minesweepersvc.Game)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetGame indicates an expected call of GetGame
func (mr *MockMineSweeperGameStorageMockRecorder) GetGame(name interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetGame", reflect.TypeOf((*MockMineSweeperGameStorage)(nil).GetGame), name)
}

// CreateUser mocks base method
func (m *MockMineSweeperGameStorage) CreateUser(u *minesweepersvc.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateUser", u)
	ret0, _ := ret[0].(error)
	return ret0
}

// CreateUser indicates an expected call of CreateUser
func (mr *MockMineSweeperGameStorageMockRecorder) CreateUser(u interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateUser", reflect.TypeOf((*MockMineSweeperGameStorage)(nil).CreateUser), u)
}

// GetUser mocks base method
func (m *MockMineSweeperGameStorage) GetUser(username string) (*minesweepersvc.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetUser", username)
	ret0, _ := ret[0].(*minesweepersvc.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetUser indicates an expected call of GetUser
func (mr *MockMineSweeperGameStorageMockRecorder) GetUser(username interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetUser", reflect.TypeOf((*MockMineSweeperGameStorage)(nil).GetUser), username)
}

// FlushAll mocks base method
func (m *MockMineSweeperGameStorage) FlushAll() error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FlushAll")
	ret0, _ := ret[0].(error)
	return ret0
}

// FlushAll indicates an expected call of FlushAll
func (mr *MockMineSweeperGameStorageMockRecorder) FlushAll() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FlushAll", reflect.TypeOf((*MockMineSweeperGameStorage)(nil).FlushAll))
}
